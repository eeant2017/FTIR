

#include "Pro_Api.h"
#include "Pub_Fun.h"
#include "GPMC_FPGA.h"
#include "winbase.h"
#include "Pro_FPGA.h"
#include  "epcIoLib.h"


static HANDLE hFPGAFile = 0;
static CRITICAL_SECTION st_gMemory;
static CRITICAL_SECTION st_gRunFlag;
//==================================================================================================
//| 函数名称 | ADCInit
//|----------|--------------------------------------------------------------------------------------
//| 函数功能 | ADC初始化
//|----------|--------------------------------------------------------------------------------------
//| 输入参数 | void
//|----------|--------------------------------------------------------------------------------------
//| 返回参数 | void
//|----------|--------------------------------------------------------------------------------------
//| 函数设计 | lxlll 2011.4.11
//==================================================================================================
INT8U ADCInit(INT8U uch_Type)
{
        return 1;
}
//==================================================================================================
//| 函数名称 | ADCOperate
//|----------|--------------------------------------------------------------------------------------
//| 函数功能 | ADC初始化
//|----------|--------------------------------------------------------------------------------------
//| 输入参数 | void
//|----------|--------------------------------------------------------------------------------------
//| 返回参数 | void
//|----------|--------------------------------------------------------------------------------------
//| 函数设计 | lxlll 2011.4.11
//==================================================================================================
INT8U ADCOperate(INT8U uch_Type,INT8U uch_Channel,FP32*f_DataIn)
{
        switch(uch_Type)
        {

                /*case AD7689_1:
                case AD7689_2:
                case AD7689_3:
                case AD7689_4:
                        GetAd7689Data(uch_Type,uch_Channel,f_DataIn);
                        break;*/
                default:

                return 0;
        }
        return 1;
}

//==================================================================================================
//| 函数名称 | ADCInit
//|----------|--------------------------------------------------------------------------------------
//| 函数功能 | ADC初始化
//|----------|--------------------------------------------------------------------------------------
//| 输入参数 | void
//|----------|--------------------------------------------------------------------------------------
//| 返回参数 | void
//|----------|--------------------------------------------------------------------------------------
//| 函数设计 | lxlll 2011.4.11
//==================================================================================================
INT8U DACInit(INT8U uch_Type)
{
        return 1;
}
//==================================================================================================
//| 函数名称 | ADCOperate
//|----------|--------------------------------------------------------------------------------------
//| 函数功能 |
//|----------|--------------------------------------------------------------------------------------
//| 输入参数 | void
//|----------|--------------------------------------------------------------------------------------
//| 返回参数 | void
//|----------|--------------------------------------------------------------------------------------
//| 函数设计 | lxlll 2011.4.11
//==================================================================================================
INT8U DACOperate(INT8U uch_Type,INT8U uch_Channel,FP32 f_DataIn)
{
        switch(uch_Type)
        {

        }
        return 1;
}
//==================================================================================================
//| 函数名称 | EepromInit
//|----------|--------------------------------------------------------------------------------------
//| 函数功能 | inital the eeprom
//|----------|--------------------------------------------------------------------------------------
//| 输入参数 | void
//|----------|--------------------------------------------------------------------------------------
//| 返回参数 | void
//|----------|--------------------------------------------------------------------------------------
//| 函数设计 | lxlll 2011.4.11
//==================================================================================================

INT8U MemoryInit(void)
{
//	AT24C512Init();

        hFPGAFile = CreateFile(TEXT("GPM1:"),                           /*  打开 Ggmc 驱动              */
                GENERIC_READ | GENERIC_WRITE,
                FILE_SHARE_READ | FILE_SHARE_WRITE,
                NULL,
                OPEN_EXISTING,
                NULL,
                NULL);
        if(hFPGAFile == INVALID_HANDLE_VALUE)
                return 0;
        else
        {
                InitializeCriticalSection(&st_gMemory);
                InitializeCriticalSection(&st_gRunFlag);
                return 1;
        }
}
INT8U MemoryClose(void)
{
        return 1;
}

//==================================================================================================
//| 函数名称 | EepromRead
//|----------|--------------------------------------------------------------------------------------
//| 函数功能 | read eeprom
//|----------|--------------------------------------------------------------------------------------
//| 输入参数 | void
//|----------|--------------------------------------------------------------------------------------
//| 返回参数 | void
//|----------|--------------------------------------------------------------------------------------
//| 函数设计 | lxlll 2011.4.11
//==================================================================================================
static INT32U ul_FpagTest = 0;
INT8U MemoryRead(INT8U uch_iType,const INT16U uin_Adrr,INT16U *uin_pData,INT16U uin_DataLen)
{
        DWORD ul_Addr = 0,ul_Data = 0;
        INT16U i = 0;
        INT8U uch_Re = 1;
        INT16U uin_Data = 0;
        INT16U *puin_Data = (INT16U*)uin_pData;

// 	if (uin_pData == NULL)
// 	{
// 		RETAILMSG(1,(_T("MemoryRead: uin_pData Err, uch_iType = %d ,uin_Adrr = 0x%x  \r\n"),uch_iType,uin_Adrr));
// 	}
// 	if (uin_DataLen < 0)
// 	{
// 		RETAILMSG(1,(_T("MemoryRead: uin_DataLen Err, uch_iType = %d ,uin_Adrr = 0x%x  \r\n"),uch_iType,uin_Adrr));
// 	}
        EnterCriticalSection(&st_gMemory);
        switch(uch_iType)
        {
        case EEPROM:
                break;
        case DSRAM_RECT:
                break;
        case FPGA_REG:
        {
        //	puch_Data = (INT8U*)uch_pData;
                ul_Addr = CS2 + uin_Adrr*2;
#if 0
                for(i = 0;i < uin_DataLen;i++)
                {
                        //	uin_Data = puin_Data[i];

                        //if (!DeviceIoControl(hFPGAFile, GPMC_FPGA_WordR, &ul_Addr, sizeof(DWORD), &puin_Data[i], sizeof(DWORD), NULL,NULL))
                        if (!DeviceIoControl(hFPGAFile, GPMC_FPGA_WordR, &ul_Addr, sizeof(DWORD), &ul_Data, sizeof(DWORD), NULL,NULL))
                        {
                                uch_Re = 0;
                        }
                        else
                        {
                                ul_Addr += 2;
                                puin_Data[i] = ul_Data;
                        }
                }
#else
                if (!DeviceIoControl(hFPGAFile, GPMC_FPGA_MEMR, &ul_Addr, sizeof(DWORD), puin_Data, uin_DataLen, NULL,NULL))
                {
                        uch_Re = 0;
                }
#endif
        }
        break;
        case DSRAM_DATA:
        {
                ul_Addr = CS5 + uin_Adrr*2;
#if 0
                for(i = 0;i < uin_DataLen;i++)
                {
                        #if 0
                        uin_pData[i] = 2;
                        uin_pData[0] = 1;
                        #else
                        if (!DeviceIoControl(hFPGAFile, GPMC_FPGA_WordR, &ul_Addr, sizeof(DWORD), &ul_Data, sizeof(DWORD), NULL,NULL))
                        {
                                uch_Re = 0;
                        }
                        else
                        {
                                ul_Addr += 2;
                                uin_pData[i] = ul_Data;

                                //if(ul_Data == 0x01 && ul_FpagTest != 0x1f5)
                                //{
                                //	//	uin_pData[i] = ul_Data;

                                //	ul_FpagTest = 0;

                                //}
                                //else if(ul_Data == 0x01)
                                //{
                                //	ul_FpagTest = 0;
                                //}
                                ///*else if(ul_Data != 0x33)
                                //{
                                //ul_FpagTest = ul_FpagTest;
                                //}*/
                                //if(ul_Data != 0xc8)
                                //{
                                //	//	uin_pData[i] = ul_Data;

                                //	ul_FpagTest = 0;

                                //}
                                //ul_FpagTest++;

                        }
                        #endif
                }	//if
#else
                if (!DeviceIoControl(hFPGAFile, GPMC_FPGA_MEMR, &ul_Addr, sizeof(DWORD), puin_Data, uin_DataLen, NULL,NULL))
                {
                        uch_Re = 0;
                }
#endif
        }
        break;

        //lz2016.1.6
        case DSRAM_TEST:
        {
                ul_Addr = CS6 + uin_Adrr * 2;
                INT16U uin_Test;
                if (!DeviceIoControl(hFPGAFile, GPMC_FPGA_MEMR, &ul_Addr, sizeof(DWORD), puin_Data, uin_DataLen, NULL,NULL))
                {
                        uch_Re = 0;
                }
                uin_Test = *(puin_Data);
        }
        break;


        }
        LeaveCriticalSection(&st_gMemory);
        return uch_Re;
}
//==================================================================================================
//| 函数名称 | EepromWrite
//|----------|--------------------------------------------------------------------------------------
//| 函数功能 | write eeprom
//|----------|--------------------------------------------------------------------------------------
//| 输入参数 | void
//|----------|--------------------------------------------------------------------------------------
//| 返回参数 | void
//|----------|--------------------------------------------------------------------------------------
//| 函数设计 | lxlll 2011.4.11
//==================================================================================================

INT8U MemoryWrite(INT8U uch_iType,const INT16U uin_Adrr,const void *uin_pData,INT16U uin_DataLen)
{
        INT32U ul_Addr = 0;
        INT8U i = 0;
        INT32U ul_Data = 0;
        INT8U uch_Re = 1;
        INT16U *puin_Data = (INT16U*)uin_pData;
        //INT8U *puch_Data = NULL;

        EnterCriticalSection(&st_gMemory);

        if(20 == uin_Adrr)
        {
                ;//RETAILMSG(1,(_T("写地址为 %d  \r\n "),uin_Adrr));
        }

        switch(uch_iType)
        {
                case EEPROM:
                {
                        ;
                }
                break;

                case DSRAM_RECT:
                {
                        //puch_Data = (INT8U*)uin_pData;

                        ul_Addr = CS3 + uin_Adrr;

                        for(i= 0; i<uin_DataLen; i++)
                        {
                                //ul_Data = puch_Data[i];
                                ul_Data = puin_Data[i];

                                ul_Addr += i;

                                if (!DeviceIoControl(hFPGAFile, GPMC_FPGA_WordW, &ul_Addr, sizeof(DWORD), &ul_Data, sizeof(DWORD), NULL,NULL))
                                {
                                        uch_Re = 0;
                                }
                        }
                }
                break;

                case FPGA_REG:
                {
                        ul_Addr = CS2 + uin_Adrr;

                        for(i=0; i<uin_DataLen; i++)
                        {
                                ul_Data = puin_Data[i];

                                ul_Addr += i;

                                if (!DeviceIoControl(hFPGAFile, GPMC_FPGA_WordW, &ul_Addr, sizeof(DWORD), &ul_Data, sizeof(DWORD), NULL,NULL))
                                {
                                        uch_Re = 0;
                                }
                        }
                }
                break;

                case DSRAM_METHOD:
                {
                        ul_Addr = CS4 + uin_Adrr;

                        for(i=0; i<uin_DataLen; i++)
                        {
                                ul_Data = puin_Data[i];

                                ul_Addr += i;

                                if (!DeviceIoControl(hFPGAFile, GPMC_FPGA_WordW, &ul_Addr, sizeof(DWORD), &ul_Data, sizeof(DWORD), NULL,NULL))
                                {
                                        uch_Re = 0;
                                }
                        }
                }
                break;

                case DSRAM_TEST:
                {
                        ul_Addr = CS6 + uin_Adrr;

                        for(i=0; i<uin_DataLen; i++)
                        {
                                ul_Data = puin_Data[i];

                                ul_Addr += i;

                                if (!DeviceIoControl(hFPGAFile, GPMC_FPGA_WordW, &ul_Addr, sizeof(DWORD), &ul_Data, sizeof(DWORD), NULL,NULL))
                                {
                                        uch_Re = 0;
                                }
                        }
                }
                break;
        }

        LeaveCriticalSection(&st_gMemory);

        return uch_Re;
}
 //==================================================================================================
//| 函数名称 |
//|----------|--------------------------------------------------------------------------------------
//| 函数功能 |
//|----------|--------------------------------------------------------------------------------------
//| 输入参数 |
//|----------|--------------------------------------------------------------------------------------
//| 返回参数 | void
//|----------|--------------------------------------------------------------------------------------
//| 函数设计 | lxlll 2011.4.11
//==================================================================================================
void OperateRunFlag(INT8U uch_SyncValue,INT16U uin_SyncAddr)
{
        if(uch_SyncValue == 1 || uch_SyncValue == 2);
        //RETAILMSG(1,(_T("同步地址：【%d】  信号量：【%d】 \r\n"),uin_iAddr,uch_iState));
        INT8U uch_Data = 0;
        EnterCriticalSection(&st_gRunFlag);

        OperateSwitch(FPGA_RUN, SWITCH_OFF);
        uch_Data = uch_SyncValue;
        MemoryWrite(FPGA_REG, uin_SyncAddr, &uch_Data);
        OperateSwitch(FPGA_RUN, SWITCH_ON);

        if ( uch_SyncValue == STOP_MS_FLAG)
        {
                Sleep(1);
                //ClearRes();//lz2016.4.6 停止扫描后将res清0
                WriteDA(DA_LTC1595_1_addr, 0, DA_LTC1595_1_syn);
                WriteDA(DA_LTC1595_2_addr, 0, DA_LTC1595_2_syn);
        }

        LeaveCriticalSection(&st_gRunFlag);
        return;
}
 //==================================================================================================
//| 函数名称 | EepromWrite
//|----------|--------------------------------------------------------------------------------------
//| 函数功能 | write eeprom
//|----------|--------------------------------------------------------------------------------------
//| 输入参数 | void
//|----------|--------------------------------------------------------------------------------------
//| 返回参数 | void
//|----------|--------------------------------------------------------------------------------------
//| 函数设计 | lxlll 2011.4.11
//==================================================================================================

void SwitchInit(void)
{
 //    GPIOInit();
}

//==================================================================================================
//| 函数名称 |
//|----------|--------------------------------------------------------------------------------------
//| 函数功能 |
//|----------|--------------------------------------------------------------------------------------
//| 输入参数 | void
//|----------|--------------------------------------------------------------------------------------
//| 返回参数 | void
//|----------|--------------------------------------------------------------------------------------
//| 函数设计 | lxlll 2011.4.11
//==================================================================================================

void OperateSwitch(INT8U uch_SwitchType,INT8U uch_OperType)
{
        switch(uch_SwitchType)
        {
        case ARM_ERROR:
                switch(uch_OperType)
                {
                case SWITCH_ON:
                        epcIoSetAPin(ARM_ERROR,1);
                        break;
                case SWITCH_OFF:
                        epcIoSetAPin(ARM_ERROR,0);
                        break;
                case SWITCH_TURN:
                        break;
                }
                break;
        case ARM_RUN:
                switch(uch_OperType)
                {
                case SWITCH_ON:
                        epcIoSetAPin(ARM_RUN,1);
                        break;
                case SWITCH_OFF:
                        epcIoSetAPin(ARM_RUN,0);
                        break;
                case SWITCH_TURN:
                        break;

                }
                break;
        case ARM_ALARM:
                switch(uch_OperType)
                {
                case SWITCH_ON:
                        epcIoSetAPin(ARM_ALARM,1);
                        break;
                case SWITCH_OFF:
                        epcIoSetAPin(ARM_ALARM,0);
                        break;
                case SWITCH_TURN:
                        break;
                }
                break;
        case FPGA_RUN:
                {
                        switch(uch_OperType)
                        {
                        case SWITCH_ON:
                                epcIoSetAPin(FPGA_RUN,1);
                                break;
                        case SWITCH_OFF:
                                epcIoSetAPin(FPGA_RUN,0);
                                break;
                        case SWITCH_TURN:
                                break;
                        }
                }
                break;
        case MS1_DC_SW:
                if(uch_OperType == SWITCH_ON){
                        /*OperateRunFlag(MS1_DC_SW_ON);*/
                        OperateRunFlag(SW_MS1_DC_ON_syn);
                }else if(uch_OperType == SWITCH_OFF){
                        /*OperateRunFlag(MS1_DC_SW_OFF);*/
                        OperateRunFlag(SW_MS1_DC_OFF_syn);
                }
                break;
        case MS2_DC_SW:
                if(uch_OperType == SWITCH_ON){
                        /*OperateRunFlag(MS2_DC_SW_ON);*/
                        OperateRunFlag(SW_MS2_DC_ON_syn);
                }else if(uch_OperType == SWITCH_OFF){
                        /*OperateRunFlag(MS2_DC_SW_OFF);*/
                        OperateRunFlag(SW_MS2_DC_OFF_syn);
                }
                break;
        case MS1_RF_SW:
                if(uch_OperType == SWITCH_ON){
                        /*OperateRunFlag(MS1_RF_SW_ON);*/
                        OperateRunFlag(SW_MS1_RF_ON_syn);
                }else if(uch_OperType == SWITCH_OFF){
                        /*OperateRunFlag(MS1_RF_SW_OFF);*/
                        OperateRunFlag(SW_MS1_RF_OFF_syn);
                }
                break;
        case MS2_RF_SW:
                if(uch_OperType == SWITCH_ON){
                        /*OperateRunFlag(MS2_RF_SW_ON);*/
                        OperateRunFlag(SW_MS2_RF_ON_syn);
                }else if(uch_OperType == SWITCH_OFF){
                        /*OperateRunFlag(MS2_RF_SW_OFF);*/
                        OperateRunFlag(SW_MS2_RF_OFF_syn);
                }
                break;
        case CORO_SW:
                if(uch_OperType == SWITCH_ON){
                        /*OperateRunFlag(CORO_SW_ON);*/
                        OperateRunFlag(SW_ECorona_ON_syn);
                }else if(uch_OperType == SWITCH_OFF){
                        /*OperateRunFlag(CORO_SW_OFF);*/
                        OperateRunFlag(SW_ECorona_OFF_syn);
                }
                break;
        case DORA_SW:
                if(uch_OperType == SWITCH_ON){
                        /*OperateRunFlag(DANA_SW_ON);*/
                        OperateRunFlag(SW_Dynode_ON_syn);
                }else if(uch_OperType == SWITCH_OFF){
                        /*OperateRunFlag(DANA_SW_OFF);*/
                        OperateRunFlag(SW_Dynode_OFF_syn);
                }
                break;
        case NEGION_SW:
                if(uch_OperType == SWITCH_ON){
                        /*OperateRunFlag(NEGION_SW_ON);*/
                        OperateRunFlag(SW_VoltSignSwitch_ON_syn);
                }else if(uch_OperType == SWITCH_OFF){
                        /*OperateRunFlag(NEGION_SW_OFF);*/
                        OperateRunFlag(SW_VoltSignSwitch_OFF_syn);
                }
                break;
        case EM_SW:
                if(uch_OperType == SWITCH_ON){
                        /*OperateRunFlag(EM_SW_ON);*/
                        OperateRunFlag(SW_EMultipiper_ON_syn);
                }else if(uch_OperType == SWITCH_OFF){
                        /*OperateRunFlag(EM_SW_OFF);*/
                        OperateRunFlag(SW_EMultipiper_OFF_syn);
                }
                break;
        case EM_PROTECT_SW:
                if(uch_OperType == SWITCH_ON){
                        /*OperateRunFlag(EM_PROTECT_SW_ON);*/
                        OperateRunFlag(SW_EMultipiper_Safeguard_ON_syn);
                }else if(uch_OperType == SWITCH_OFF){
                        /*OperateRunFlag(EM_PROTECT_SW_OFF);*/
                        OperateRunFlag(SW_EMultipiper_Safeguard_OFF_syn);
                }
                break;
        case PRE_PUMP_SW://TODO未实现
                if(uch_OperType == SWITCH_ON){
                        /*OperateRunFlag(EM_SW_ON);*/
                }else if(uch_OperType == SWITCH_OFF){
                        /*OperateRunFlag(EM_SW_OFF);*/
                }
                break;
        case PUMP_SW://TODO未实现
                if(uch_OperType == SWITCH_ON){
                        /*OperateRunFlag(PUMP_SW_ON);*/
                }else if(uch_OperType == SWITCH_OFF){
                        /*OperateRunFlag(PUMP_SW_OFF);*/
                }
                break;
        case CAPI_SW:
                if(uch_OperType == SWITCH_ON){
                        /*OperateRunFlag(CAPI_SW_ON);*/
                        OperateRunFlag(SW_Capillary_ON_syn);
                }else if(uch_OperType == SWITCH_OFF){
                        /*OperateRunFlag(CAPI_SW_OFF);*/
                        OperateRunFlag(SW_Capillary_OFF_syn);
                }
                break;
        case BIT_SW:
                if(uch_OperType == SWITCH_ON){
                        OperateRunFlag(SW_BIT_ON_syn);
                }else if(uch_OperType == SWITCH_OFF){
                        OperateRunFlag(SW_BIT_OFF_syn);
                }
                break;
        case LBVacuumG_SW:
                if(uch_OperType == SWITCH_ON){
                        OperateRunFlag(SW_LBVacuumG_ON_syn);
                }else if(uch_OperType == SWITCH_OFF){
                        OperateRunFlag(SW_LBVacuumG_OFF_syn);
                }
                break;
        }
}


//读取FPGA版本号 版本号只读后6个，不包含点
void ReadFPGAVersion(INT8U *puch_Data)
{
        int i;
        INT16U uin_Addr;
        uin_Addr = TEST_ADDR_VERSION;
        INT16U uin_ReadVersion[32];

        for(i=0;i<32;i++)
        {
                MemoryRead(DSRAM_TEST,uin_Addr+i, uin_ReadVersion+i);
                puch_Data[i] = (INT8U)uin_ReadVersion[i];
        }

}


//no more
