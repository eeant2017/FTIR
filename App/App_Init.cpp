//==================================================================================================
//| 文件名称 | App_Init.cpp
//|-----------------------------------------------------------------------------------------------
//| 文件描述 | 初始化模块
//|-----------------------------------------------------------------------------------------------
//| 运行环境 | 所有C/C++语言编译环境，包括单片机编译器
//|-----------------------------------------------------------------------------------------------
//| 版权声明 | Copyright2017, 聚光科技(FPI)
//|------------------------------------------------------------------------------------------------
//|  版本   |  时间       |  作者     | 描述
//|----------------------|-----------|------------------------------------------------------------
//|  V1.0   | 2018.07.11  |  zbb      | 初版
//==================================================================================================

#include "App_Init.h"
#include "globalvar.h"
#include "App_ComFpi.h"
#include "Bsp/Bsp_TCP.h"
#include "Bsp/Bsp_Fpga.h"
#include "Pub/pub_MKSVacuometer_V1_0.h"
#include "sqlite.h"
#include "Mod/mod_fpgaupdate.h"
#include "Pro/pro_fpga.h"
#include "Mod/mod_ioctrl.h"
#include "Pub/Pub_Alarm.h"
#include "Mod/Mod_Method.h"

//#include "data1.h"


void ConfigInit(void);
void FPGAInit();

uint32_t *p_srcdata = NULL;

extern void vMemDump(INT8U *pData, INT16U DataLen);

//==================================================================================================
//| 函数名称 | BspInit()
//|------------------------------------------------------------------------------------------------
//| 函数功能 | 板级初始化函数
//|------------------------------------------------------------------------------------------------
//| 输入参数 | 无
//|------------------------------------------------------------------------------------------------
//| 返回参数 | 无
//|------------------------------------------------------------------------------------------------
//| 函数设计 | zbb 2018.7.30
//==================================================================================================
void BspInit(void)
{

    ConfigInit();

    Uart1Init();
    TCPInit();

    //FPGA init
    cl_bspFpga.InsmodFPGA();
    cl_bspFpga.FPGAInit();


    Can0Init();


    FPGAInit();// FPGA相關的初始化


// 显示中文测试
//    wchar_t achar[20] = L"suony你好";

//    qDebug() << "suony你好";
//    qDebug("1%s",achar);
//    QString str1 = "你好";
//     qDebug("1%s",str1.toUtf8().data());

}
//==================================================================================================
//| 函数名称 | FPGAInit()
//|------------------------------------------------------------------------------------------------
//| 函数功能 | 挂载的FPGA需要的初始化
//|------------------------------------------------------------------------------------------------
//| 输入参数 | 无
//|------------------------------------------------------------------------------------------------
//| 返回参数 | 无
//|------------------------------------------------------------------------------------------------
//| 函数设计 | zbb 2018.7.30
//==================================================================================================

void FPGAInit()
{
    FPGAUpdateInit(); //在线升级初始化，同时使能FPGA电源
    ResetAllVol();//初始化FPGA 的DAC输出电压

    OperateSwitch(CORO_SW,SWITCH_OFF);
    g_clIOCtrl.m_stIOCtrl.uch_CoroIO = 0;
    OperateSwitch(EM_SW,SWITCH_OFF);
    g_clIOCtrl.m_stIOCtrl.uch_EMIO = 0;
    OperateRunFlag(LC_MS_SYN_CLEAR_FLAG);
    cl_gMethod.SetMsState(0);


    INT32U ul_SelfTest = FPGABusTest();
    //总线自检失败后添加报警码
    if ( ul_SelfTest != 0)
    {
          PushAlarmCode(g_clMnt.st_mMntPara.st_GPMCCheckErr.uch_FaultCode );
    }



    //test FPGA读写
    //FPGABusPerformanceTest();
}

//==================================================================================================
//| 函数名称 | ConfigInit()
//|------------------------------------------------------------------------------------------------
//| 函数功能 | 配置内容初始化
//|------------------------------------------------------------------------------------------------
//| 输入参数 | 无
//|------------------------------------------------------------------------------------------------
//| 返回参数 | 无
//|------------------------------------------------------------------------------------------------
//| 函数设计 | zbb 2018.7.30
//==================================================================================================
void ConfigInit(void)
{
    STRCALIPARA st_CaliPara;
    m_SQLite.InitSQlite();

    st_CaliPara.uch_ID = 0;
    st_CaliPara.f_Max = 0;
    st_CaliPara.f_Min = 0;
    st_CaliPara.f_Default = 0;
    st_CaliPara.f_SetK = 1;
    st_CaliPara.f_SetB = 0;
    st_CaliPara.f_ReadK = 1;
    st_CaliPara.f_ReadB = 0;

//    for(int i=0;i<30;i++)
//    {
//        st_CaliPara.uch_ID = i;
//        m_SQLite.InsertCaliPara(st_CaliPara);

//    }


    for(int i=0;i<30;i++)
    {
        st_CaliPara.uch_ID = i;
        m_SQLite.UpdateCaliPara(st_CaliPara);

    }
}



//==================================================================================================
//| 函数名称 | SysParaInit()
//|------------------------------------------------------------------------------------------------
//| 函数功能 | 参数初始化
//|------------------------------------------------------------------------------------------------
//| 输入参数 | 无
//|------------------------------------------------------------------------------------------------
//| 返回参数 | 无
//|------------------------------------------------------------------------------------------------
//| 函数设计 | zbb 2018.7.30
//==================================================================================================
void SysParaInit(void)
{

#if 0
    for (i = 0; i < 32768; i++)
    {
        a_testdata[i] = i;
    }

    int file_fd;
    uint32_t file_size = 0;
    uint8_t temp_buf[1024] = {0};
    struct stat databuf;
    //get 2 chanal data
    uint8_t data1[1024] = {0};
    uint8_t data2[1024] = {0};

    uint8_t a_data[4] = {0};
    uint32_t ui_data = 0;

    //stat("1.txt",&databuf);
    //qDebug("file size : %d", databuf.st_size);
   // file_fd = open("data1.txt",O_RDONLY);
    if (file_fd < 0)
    {
        qDebug("open err");
    }

    //p_srcdata = (uint32_t *)malloc(sizeof(ca_data1)+1);
    //file_size = read(file_fd, p_srcdata, sizeof(ca_data1));
    qDebug("read out data1 size:%ld",sizeof(ca_data1));

    //sprintf(ui_data,%d, );

   // EncodeUlong(ui_data,a_data);

    //separate two data



#if 0
    fseek(p_file_fd,0,SEEK_END);
    file_size = ftell(p_file_fd);

    qDebug("file size : %d", file_size);

    fclose (p_file_fd);


    file_size = read(file_fd,temp_buf,20);
    qDebug("read out data1 :");
    vMemDump(temp_buf, 20);

        file_size = read(file_fd,temp_buf,20);
    qDebug("read out data2 :");
    vMemDump(temp_buf, 20);

        file_size = read(file_fd,temp_buf,20);
    qDebug("read out data3 :");
    vMemDump(temp_buf, 20);

        file_size = read(file_fd,temp_buf,20);
    qDebug("read out data4d :");
    vMemDump(temp_buf, 20);
#endif

#endif
}
//==================================================================================================
//| 函数名称 | ModuleEnable()
//|------------------------------------------------------------------------------------------------
//| 函数功能 | 组件层模组使能
//|------------------------------------------------------------------------------------------------
//| 输入参数 | 无
//|------------------------------------------------------------------------------------------------
//| 返回参数 | 无
//|------------------------------------------------------------------------------------------------
//| 函数设计 | zbb 2018.7.30
//==================================================================================================
void ModuleEnable(void)
{
    MKSVacuometerInit();
}
//==================================================================================================
//| 函数名称 | AppModEnable()
//|------------------------------------------------------------------------------------------------
//| 函数功能 | 应用层模组使能
//|------------------------------------------------------------------------------------------------
//| 输入参数 | 无
//|------------------------------------------------------------------------------------------------
//| 返回参数 | 无
//|------------------------------------------------------------------------------------------------
//| 函数设计 | zbb 2018.7.30
//==================================================================================================
void  AppModEnable(void)
{
    a_ComFpi.SetModEnable(TRUE);

}


//==================================================================================================
//| 函数名称 | SystemInit()
//|------------------------------------------------------------------------------------------------
//| 函数功能 | 系统初始化函数
//|------------------------------------------------------------------------------------------------
//| 输入参数 | 无
//|------------------------------------------------------------------------------------------------
//| 返回参数 | 无
//|------------------------------------------------------------------------------------------------
//| 函数设计 | zbb 2018.7.30
//==================================================================================================
void SystemInit(void)
{

    //gpio_ctl(FPGA_EN,1,0);
    //qDebug("FPGA start");
    BspInit();

    SysParaInit();
    ModuleEnable();
    AppModEnable();
    //创建任务数
    CreateSysThread();


}
//no more
